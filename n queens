import numpy as np
import heapq

class PuzzleState:
    def __init__(self, board, level=0, parent=None):
        self.board = board
        self.level = level
        self.parent = parent
        self.blank_pos = self.find_blank()
        self.goal = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]])

    def find_blank(self):
        return np.argwhere(self.board == 0)[0]

    def is_goal(self):
        return np.array_equal(self.board, self.goal)

    def get_neighbors(self):
        neighbors = []
        x, y = self.blank_pos
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = self.board.copy()
                new_board[x, y], new_board[new_x, new_y] = new_board[new_x, new_y], new_board[x, y]
                neighbors.append(PuzzleState(new_board, self.level + 1, self))
        return neighbors

    def heuristic(self):
        return np.sum(self.board != self.goal) - 1  # Count of misplaced tiles

    def __lt__(self, other):
        return (self.level + self.heuristic()) < (other.level + other.heuristic())

def a_star_search(initial_state):
    open_set = []
    heapq.heappush(open_set, initial_state)
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.is_goal():
            return current_state

        closed_set.add(tuple(map(tuple, current_state.board)))

        for neighbor in current_state.get_neighbors():
            if tuple(map(tuple, neighbor.board)) not in closed_set:
                heapq.heappush(open_set, neighbor)

    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.parent
    path.reverse()

    for level, board in enumerate(path):
        print(f"Level {level}:\n{board}\n")

if __name__ == "__main__":
    initial_input = input("Enter initial state (e.g., '1 2 3 4 5 6 0 7 8'): ")
    initial_state = np.array(list(map(int, initial_input.split()))).reshape(3, 3)
    initial_puzzle = PuzzleState(initial_state)

    solution = a_star_search(initial_puzzle)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
     
Enter initial state (e.g., '1 2 3 4 5 6 0 7 8'): 1 2 3 4 0 5 6 7 8
Solution found:
Level 0:
[[1 2 3]
 [4 0 5]
 [6 7 8]]

Level 1:
[[1 2 3]
 [4 5 0]
 [6 7 8]]

Level 2:
[[1 2 3]
 [4 5 8]
 [6 7 0]]

Level 3:
[[1 2 3]
 [4 5 8]
 [6 0 7]]

Level 4:
[[1 2 3]
 [4 5 8]
 [0 6 7]]

Level 5:
[[1 2 3]
 [0 5 8]
 [4 6 7]]

Level 6:
[[1 2 3]
 [5 0 8]
 [4 6 7]]

Level 7:
[[1 2 3]
 [5 6 8]
 [4 0 7]]

Level 8:
[[1 2 3]
 [5 6 8]
 [4 7 0]]

Level 9:
[[1 2 3]
 [5 6 0]
 [4 7 8]]

Level 10:
[[1 2 3]
 [5 0 6]
 [4 7 8]]

Level 11:
[[1 2 3]
 [0 5 6]
 [4 7 8]]

Level 12:
[[1 2 3]
 [4 5 6]
 [0 7 8]]

Level 13:
[[1 2 3]
 [4 5 6]
 [7 0 8]]

Level 14:
[[1 2 3]
 [4 5 6]
 [7 8 0]]


from random import randint
N = int(input("Enter the number of queens:"))

def configureRandomly(board, state):

	for i in range(N):
		state[i] = randint(0, 100000) % N;
		board[state[i]][i] = 1;

def printBoard(board):
	for i in range(N):
		print(*board[i])

def printState( state):
	print(*state)


def compareStates(state1, state2):
	for i in range(N):
		if (state1[i] != state2[i]):
			return False;

	return True;


def fill(board, value):
	for i in range(N):
		for j in range(N):
			board[i][j] = value;


def calculateObjective( board, state):

	attacking = 0;

	for i in range(N):

		row = state[i]
		col = i - 1;
		while (col >= 0 and board[row][col] != 1) :
			col -= 1

		if (col >= 0 and board[row][col] == 1) :
			attacking += 1;

		row = state[i]
		col = i + 1;
		while (col < N and board[row][col] != 1):
			col += 1;

		if (col < N and board[row][col] == 1) :
			attacking += 1;

		row = state[i] - 1
		col = i - 1;
		while (col >= 0 and row >= 0 and board[row][col] != 1) :
			col-= 1;
			row-= 1;

		if (col >= 0 and row >= 0 and board[row][col] == 1) :
			attacking+= 1;

		row = state[i] + 1
		col = i + 1;
		while (col < N and row < N and board[row][col] != 1) :
			col+= 1;
			row+= 1;

		if (col < N and row < N and board[row][col] == 1) :
			attacking += 1;

		row = state[i] + 1
		col = i - 1;
		while (col >= 0 and row < N and board[row][col] != 1) :
			col -= 1;
			row += 1;

		if (col >= 0 and row < N and board[row][col] == 1) :
			attacking += 1;

		row = state[i] - 1
		col = i + 1;
		while (col < N and row >= 0 and board[row][col] != 1) :
			col += 1;
			row -= 1;

		if (col < N and row >= 0 and board[row][col] == 1) :
			attacking += 1;


	return int(attacking / 2);

def generateBoard( board, state):
	fill(board, 0);
	for i in range(N):
		board[state[i]][i] = 1;


def copyState( state1, state2):

	for i in range(N):
		state1[i] = state2[i];


def getNeighbour(board, state):

	opBoard = [[0 for _ in range(N)] for _ in range(N)]
	opState = [0 for _ in range(N)]

	copyState(opState, state);
	generateBoard(opBoard, opState);


	opObjective = calculateObjective(opBoard, opState);


	NeighbourBoard = [[0 for _ in range(N)] for _ in range(N)]

	NeighbourState = [0 for _ in range(N)]
	copyState(NeighbourState, state);
	generateBoard(NeighbourBoard, NeighbourState);


	for i in range(N):
		for j in range(N):

			if (j != state[i]) :

				NeighbourState[i] = j;
				NeighbourBoard[NeighbourState[i]][i] = 1;
				NeighbourBoard[state[i]][i] = 0;

				temp = calculateObjective( NeighbourBoard, NeighbourState);


				if (temp <= opObjective) :
					opObjective = temp;
					copyState(opState, NeighbourState);
					generateBoard(opBoard, opState);

				NeighbourBoard[NeighbourState[i]][i] = 0;
				NeighbourState[i] = state[i];
				NeighbourBoard[state[i]][i] = 1;


	copyState(state, opState);
	fill(board, 0);
	generateBoard(board, state);

def hillClimbing(board, state):


	neighbourBoard = [[0 for _ in range(N)] for _ in range(N)]
	neighbourState = [0 for _ in range(N)]

	copyState(neighbourState, state);
	generateBoard(neighbourBoard, neighbourState);

	while True:

		# Copying the neighbour board and
		# state to the current board and
		# state, since a neighbour
		# becomes current after the jump.

		copyState(state, neighbourState);
		generateBoard(board, state);

		# Getting the optimal neighbour

		getNeighbour(neighbourBoard, neighbourState);

		if (compareStates(state, neighbourState)) :

			# If neighbour and current are
			# equal then no optimal neighbour
			# exists and therefore output the
			# result and break the loop.

			printBoard(board);
			break;

		elif (calculateObjective(board, state) == calculateObjective( neighbourBoard,neighbourState)):

			# If neighbour and current are
			# not equal but their objectives
			# are equal then we are either
			# approaching a shoulder or a
			# local optimum, in any case,
			# jump to a random neighbour
			# to escape it.

			# Random neighbour
			neighbourState[randint(0, 100000) % N] = randint(0, 100000) % N;
			generateBoard(neighbourBoard, neighbourState);

# Driver code
state = [0] * N
board = [[0 for _ in range(N)] for _ in range(N)]
configureRandomly(board, state);
hillClimbing(board, state);



     
Enter the number of queens:8
0 0 0 0 1 0 0 0
0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 0 0 1 0
0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0
