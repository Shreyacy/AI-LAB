from collections import deque

def bfs(start, goal):
    queue = deque([(start, [start], 0)])  # (node, path, level)
    visited = set([start])
    while queue:
        node, path, level = queue.popleft()
        if node == goal:
            return path, level
        for next_node in get_neighbors(node):
            if next_node not in visited:
                visited.add(next_node)
                queue.append((next_node, path + [next_node], level + 1))
    return None, None

def get_neighbors(node):
    neighbors = []
    for i in range(9):
        if node[i] == 0:
            x, y = i // 3, i % 3
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < 3 and 0 <= ny < 3:
                    n = list(node)
                    n[i], n[nx * 3 + ny] = n[nx * 3 + ny], n[i]
                    neighbors.append(tuple(n))
            break
    return neighbors

def print_board(board):
    board = [board[i:i+3] for i in range(0, 9, 3)]
    for row in board:
        print(" | ".join(str(x) for x in row))
        print("---------")

def main():
    start = tuple(int(x) for x in input("Enter the initial state (space-separated): ").split())
    goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)
    path, level = bfs(start, goal)
    if path:
        print("Solution found:")
        for i, node in enumerate(path):
            print(f"Move {i}:")
            print_board(node)
            print()
        print(f"Number of moves: {level}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
